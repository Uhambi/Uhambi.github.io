{"version":3,"sources":["components/ImagePreview.tsx","components/ImageList.tsx","hooks/useKeyDown.ts","components/Lightbox.tsx","components/ImageSlideshow.tsx","App.tsx","hooks/useLightbox.ts","serviceWorker.ts","index.tsx"],"names":["DivContainer","styled","div","ImagePreview","url","className","onClick","style","backgroundImage","React","memo","images","onImageClick","handleClick","index","map","imageUrl","key","useKeyDown","handler","savedHandler","useRef","useEffect","current","handleKeyDown","e","preventDefault","document","addEventListener","removeEventListener","p","w","h","Lightbox","isOpen","close","width","height","children","ImageSlideshow","slides","activeIndex","useState","setIndex","prevSlide","goToSlide","nextSlide","length","IMAGE_URLS","App","initialValue","setOpen","useCallback","useLightbox","openLightbox","closeLightbox","setActiveIndex","openFullImage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.68629f21.chunk.js","sourcesContent":["import React from \"react\"\nimport styled from \"styled-components\"\n\ninterface Props {\n  url: string\n  onClick?: () => void\n  className?: string\n}\n\nconst ImagePreview: React.FC<Props> = ({\n  url,\n  className,\n  onClick\n}) => {\n  return (\n    <DivContainer className={className}>\n      <div\n        onClick={onClick}\n        className=\"ImagePreview--image\"\n        style={{ backgroundImage: `url(${url})` }}\n      />\n    </DivContainer>\n  )\n}\n\nconst DivContainer = styled.div`\n  width: 200px;\n  height: 200px;\n  box-sizing: border-box;\n  border: 1px solid lightgray;\n\n  .ImagePreview--image {\n    width: 100%;\n    height: 100%;\n    background-repeat: no-repeat;\n    background-position: center;\n    background-size: contain;\n    background-color: white;\n  }\n`\n\nexport default ImagePreview\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport ImagePreview from \"./ImagePreview\"\n\ninterface Props {\n  images: Array<string>\n  onImageClick: (index: number) => void\n}\n\nconst ImageList: React.FC<Props> = ({\n  images,\n  onImageClick\n}) => {\n  const handleClick = (index: number) => () => {\n    onImageClick(index)\n  }\n\n  return (\n    <DivContainer>\n      {images.map((imageUrl, index) => (\n        <ImagePreview\n          key={imageUrl}\n          url={imageUrl}\n          onClick={handleClick(index)}\n          className=\"ImageList--item\"\n        />\n      ))}\n    </DivContainer>\n  )\n}\n\nconst DivContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  margin: 0 -5px;\n\n  .ImageList--item {\n    padding: 20px;\n    margin: 0 5px 10px;\n    \n    @media (max-width: 667px) {\n      width: calc(50% - 10px);\n    }\n    \n    @media (max-width: 480px) {\n      width: calc(100% - 10px);\n    }\n  }\n`\n\nexport default React.memo(ImageList)\n","import { useRef, useEffect } from \"react\"\n\nexport default function useKeyDown(key: string, handler: () => void) {\n  const savedHandler = useRef<any>()\n\n  useEffect(() => {\n    savedHandler.current = handler\n  }, [handler])\n  \n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === key) {\n        e.preventDefault()\n        savedHandler.current()\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown)\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown)\n    }\n  }, [key])\n}\n","import React from \"react\"\nimport styled from \"styled-components\"\nimport useKeyDown from \"../hooks/useKeyDown\"\n\ninterface Props {\n  isOpen: boolean\n  close: () => void\n  width?: string\n  height?: string\n}\n\ninterface StyledProps {\n  w?: string\n  h?: string\n}\n\nconst Lightbox: React.FC<Props> = ({\n  isOpen,\n  close,\n  width,\n  height,\n  children\n}) => {\n  useKeyDown('Escape', close)\n\n  if (!isOpen) return null\n\n  return (\n    <DivContainer w={width} h={height}>\n      <div onClick={close} className=\"Lightbox--overlay\"/>\n      <button className=\"Lightbox--close\" onClick={close}>x</button>\n      <div className=\"Lightbox--content\">\n        {children}\n      </div>\n    </DivContainer>\n  )\n}\n\nconst DivContainer = styled.div<StyledProps>`\n  position: fixed;\n  top: 0;\n  left: 0;\n  z-index: 100;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n\n  .Lightbox--overlay {\n    position: absolute;\n    top: 0;\n    left: 0;\n    z-index: -1;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0, 0, 0, 0.5);\n  }\n  \n  .Lightbox--close {\n    position: absolute;\n    top: 10px;\n    right: 10px;\n    z-index: 10;\n    border: 0;\n    background-color: #000;\n    border-radius: 50%;\n    color: #fff;\n    padding: 0;\n    width: 30px;\n    height: 30px;\n    cursor: pointer;\n    box-sizing: border-box;\n  }\n\n  .Lightbox--content {\n    padding: 15px;\n    overflow-y: auto;\n    max-width: calc(100vw - 30px);\n    max-height: calc(100vh - 30px);\n    background-color: #fff;\n    box-sizing: border-box;\n    width: ${p => p.w || '400px'};\n    height: ${p => p.h || '400px'};\n  }\n`\n\nexport default Lightbox\n","import React, { useState, useEffect } from \"react\"\nimport styled from \"styled-components\"\nimport useKeyDown from \"../hooks/useKeyDown\";\nimport ImagePreview from \"./ImagePreview\"\n\ninterface Props {\n  slides: Array<string>\n  activeIndex?: number\n  className?: string\n}\n\nconst ImageSlideshow: React.FC<Props> = ({\n  slides,\n  activeIndex,\n  className\n}) => {\n  const [index, setIndex] = useState(0)\n  const prevSlide = () => {\n    goToSlide(index - 1)\n  }\n  const nextSlide = () => {\n    goToSlide(index + 1)\n  }\n  const goToSlide = (index: number) => {\n    if (index >= slides.length) {\n      setIndex(0)\n    } else if (index < 0) {\n      setIndex(slides.length - 1)\n    } else {\n      setIndex(index)\n    }\n  }\n  \n  useEffect(() => {\n    setIndex(activeIndex || 0)\n  }, [activeIndex])\n\n  useKeyDown('ArrowLeft', prevSlide)\n  useKeyDown('ArrowRight', nextSlide)\n\n  return (\n    <DivContainer className={className}>\n      <ImagePreview\n        url={slides[index]}\n        className=\"ImageSlideshow--slide\"\n      />\n      <button className=\"ImageSlideshow--btn prev\" onClick={prevSlide}>‹</button>\n      <button className=\"ImageSlideshow--btn next\" onClick={nextSlide}>›</button>\n    </DivContainer>\n  )\n}\n\nconst DivContainer = styled.div`\n  width: 100%;\n  height: 100%;\n  position: relative;\n  \n  .ImageSlideshow--btn {\n    position: absolute;\n    width: 30px;\n    height: 30px;\n    top: 50%;\n    margin-top: -15px;\n    border: 0;\n    background-color: #fff;\n    border-radius: 50%;\n    border: 1px solid lightgray;\n    box-sizing: border-box;\n    cursor: pointer;\n    color: #000;\n    padding: 0;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.15);\n    \n    &.prev {\n      left: 15px;\n    }\n    \n    &.next {\n      right: 15px;\n    }\n  }\n\n  .ImageSlideshow--slide {\n    width: 100%;\n    height: 100%;\n  }\n`\n\nexport default ImageSlideshow\n","import React, { useState, useCallback } from \"react\"\nimport styled from \"styled-components\"\nimport useLightbox from \"./hooks/useLightbox\"\nimport ImageList from \"./components/ImageList\"\nimport Lightbox from \"./components/Lightbox\"\nimport ImageSlideshow from \"./components/ImageSlideshow\";\n\nconst IMAGE_URLS = [\n  \"https://lh3.googleusercontent.com/YEcRcfKUaq3mA3vHN_VcE2G4TN8ZzvyTJnjfOXgVHjfCO3u2zKjJmK6xTdEUm6q5F8OTTcTB7EoiZ4ePpknxq8Jz\",\n  \"https://lh3.googleusercontent.com/0jGB0WpcTOTGUAjSkLZFjV2lox-9rZ1WhduWJYdXlThaaowvZVm7RfvB0F7S6SkaRZTA1L3-O8Ik5x47d4bt8riR\",\n  \"https://lh3.googleusercontent.com/BTmQVc1Rmcee-9JxVcqSeklCQyZbEStqdO43NSnfY-FzhARq66bqJl2LRsvRydmyLGFwn9kxnhCpTmsf5kiUZ5xR=s300\",\n  \"https://lh3.googleusercontent.com/wWyUN_8wHRMxhanvt9jm0ZYFfv72jLArs3AgJVBmSRODdaZ8I9vr9CRxtB9LNWV5uYfw5Yxaqktc7tgDm_sp6V7aNA=s700\",\n  \"https://lh3.googleusercontent.com/yeqH5r517R1hEsotL3Yfk00ntwFdxmFf5s6gU9fui9d1BSnJVojsWkWbOqRN2JlaCt3oRKcbEMfaHKwJATRgHIEy\",\n]\n\nconst App = () => {\n  const [isOpen, openLightbox, closeLightbox] = useLightbox(false)\n  const [activeIndex, setActiveIndex] = useState(0);\n\n  const openFullImage = useCallback((index: number) => {\n    setActiveIndex(index)\n    openLightbox()\n  }, [openLightbox])\n\n  return (\n    <DivContainer>\n      <div className=\"App--instructions\">Click an image below</div>\n      <ImageList\n        images={IMAGE_URLS}\n        onImageClick={openFullImage}\n      />\n      <Lightbox\n        width=\"600px\"\n        height=\"600px\"\n        close={closeLightbox}\n        isOpen={isOpen}>\n        <ImageSlideshow\n          slides={IMAGE_URLS}\n          activeIndex={activeIndex}\n        />\n      </Lightbox>\n    </DivContainer>\n  )\n}\n\nconst DivContainer = styled.div`\n  padding: 20px;\n\n  .App--instructions {\n    margin-bottom: 20px;\n  }\n`\n\nexport default App\n","import { useState, useCallback } from \"react\"\n\nexport default function (initialValue: boolean) {\n  const [isOpen, setOpen] = useState(initialValue)\n  \n  const open = useCallback(() => {\n    setOpen(true)\n  }, [])\n  \n  const close = useCallback(() => {\n    setOpen(false)\n  }, [])\n  \n  return [isOpen, open, close] as const\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\")\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\")\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\",\n      )\n    })\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport App from \"./App\"\nimport * as serviceWorker from \"./serviceWorker\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}